name: notify TG



on:
  push:
    branches:
      - master # Sostituisci con il branch che desideri monitorare

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get original commit details
        id: original_commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_SHA=$(jq -r .after $GITHUB_EVENT_PATH)
          COMMIT_DETAILS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA")
          ORIGINAL_COMMIT_MESSAGE=$(echo $COMMIT_DETAILS | jq -r .commit.message)
          ORIGINAL_COMMIT_AUTHOR=$(echo $COMMIT_DETAILS | jq -r .commit.author.name)
          ORIGINAL_COMMIT_DESCRIPTION=$(echo $COMMIT_DETAILS | jq -r .commit.message)
          echo "::set-output name=sha::$COMMIT_SHA"
          echo "::set-output name=message::$ORIGINAL_COMMIT_MESSAGE"
          echo "::set-output name=description::$ORIGINAL_COMMIT_DESCRIPTION"
          echo "::set-output name=author::$ORIGINAL_COMMIT_AUTHOR"

      - name: Get modified files and calculate weight
        id: modified_files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_SHA="${{ steps.original_commit.outputs.sha }}"
          REPO="${{ github.repository }}"
          COMMIT_DETAILS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/commits/$COMMIT_SHA")
          MODIFIED_FILES=$(echo $COMMIT_DETAILS | jq -r '.files[].filename')
          ADDED_BYTES=$(echo $COMMIT_DETAILS | jq '[.files[].additions] | add')
          REMOVED_BYTES=$(echo $COMMIT_DETAILS | jq '[.files[].deletions] | add')
          ADDED_KB=$(echo "scale=2; $ADDED_BYTES / 1024" | bc)
          REMOVED_KB=$(echo "scale=2; $REMOVED_BYTES / 1024" | bc)
          ADDED_LINES=$(echo $COMMIT_DETAILS | jq '[.files[].additions] | add')
          REMOVED_LINES=$(echo $COMMIT_DETAILS | jq '[.files[].deletions] | add')
          echo "Modified files: $MODIFIED_FILES"
          echo "Added KB: $ADDED_KB"
          echo "Removed KB: $REMOVED_KB"
          echo "Added Lines: $ADDED_LINES"
          echo "Removed Lines: $REMOVED_LINES"
          echo "::set-output name=files::$MODIFIED_FILES"
          echo "::set-output name=added_kb::$ADDED_KB"
          echo "::set-output name=removed_kb::$REMOVED_KB"
          echo "::set-output name=added_lines::$ADDED_LINES"
          echo "::set-output name=removed_lines::$REMOVED_LINES"

      - name: Read keyword commit counts
        id: read_counts
        run: |
          if [ -f keyword_commit_counts.json ]; then
            COUNTS=$(cat keyword_commit_counts.json)
          else
            COUNTS='{"design":0,"gameplay":0,"narrativa":0,"performance":0,"audio":0}'
          fi
          echo "::set-output name=counts::$COUNTS"

      - name: Get commit count with keywords
        id: commit_count_keywords
        run: |
          COUNTS='${{ steps.read_counts.outputs.counts }}'
          COMMIT_COUNT_DESIGN=$(git log --grep="design" -i --oneline | wc -l)
          COMMIT_COUNT_GAMEPLAY=$(git log --grep="gameplay" -i --oneline | wc -l)
          COMMIT_COUNT_NARRATIVA=$(git log --grep="narrativa" -i --oneline | wc -l)
          COMMIT_COUNT_PERFORMANCE=$(git log --grep="performance" -i --oneline | wc -l)
          COMMIT_COUNT_AUDIO=$(git log --grep="audio" -i --oneline | wc -l)
          NEW_COUNTS=$(echo $COUNTS | jq --argjson design $COMMIT_COUNT_DESIGN --argjson gameplay $COMMIT_COUNT_GAMEPLAY --argjson narrativa $COMMIT_COUNT_NARRATIVA --argjson performance $COMMIT_COUNT_PERFORMANCE --argjson audio $COMMIT_COUNT_AUDIO '.design += ($design | tonumber) | .gameplay += ($gameplay | tonumber) | .narrativa += ($narrativa | tonumber) | .performance += ($performance | tonumber) | .audio += ($audio | tonumber)')
          echo $NEW_COUNTS > keyword_commit_counts.json
          echo "::set-output name=new_counts::$NEW_COUNTS"

      - name: Get commit author
        id: commit_author
        run: |
          COMMIT_AUTHOR_NAME=$(git log -1 --pretty=format:'%an' ${{ steps.original_commit.outputs.sha }})
          COMMIT_AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae' ${{ steps.original_commit.outputs.sha }})
          echo "::set-output name=name::$COMMIT_AUTHOR_NAME"
          echo "::set-output name=email::$COMMIT_AUTHOR_EMAIL"

      - name: Send message to Telegram
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          ORIGINAL_COMMIT_SHA="${{ steps.original_commit.outputs.sha }}"
          ORIGINAL_COMMIT_MESSAGE="${{ steps.original_commit.outputs.message }}"
          ORIGINAL_COMMIT_DESCRIPTION="${{ steps.original_commit.outputs.description }}"
          ORIGINAL_COMMIT_AUTHOR="${{ steps.original_commit.outputs.author }}"
          COUNTS=$(cat keyword_commit_counts.json)
          COMMIT_COUNT_DESIGN=$(echo $COUNTS | jq '.design')
          COMMIT_COUNT_GAMEPLAY=$(echo $COUNTS | jq '.gameplay')
          COMMIT_COUNT_NARRATIVA=$(echo $COUNTS | jq '.narrativa')
          COMMIT_COUNT_PERFORMANCE=$(echo $COUNTS | jq '.performance')
          COMMIT_COUNT_AUDIO=$(echo $COUNTS | jq '.audio')
          MODIFIED_FILES="${{ steps.modified_files.outputs.files }}"
          ADDED_KB="${{ steps.modified_files.outputs.added_kb }}"
          REMOVED_KB="${{ steps.modified_files.outputs.removed_kb }}"
          ADDED_LINES="${{ steps.modified_files.outputs.added_lines }}"
          REMOVED_LINES="${{ steps.modified_files.outputs.removed_lines }}"
          MESSAGE=$(printf "Nuovo commit nel repository: ${{ github.repository }}.\n\n*Commit:* $ORIGINAL_COMMIT_SHA\n\n*Autore:* $ORIGINAL_COMMIT_AUTHOR\n\n*Messaggio:* $ORIGINAL_COMMIT_MESSAGE\n\n*Descrizione:* $ORIGINAL_COMMIT_DESCRIPTION\n\n*File modificati:*\n\n$MODIFIED_FILES\n\n*Bytes aggiunti:* $ADDED_KB KB\n*Bytes rimossi:* $REMOVED_KB KB\n\n*Linee aggiunte:* $ADDED_LINES\n*Linee rimosse:* $REMOVED_LINES\n\n*Numero di commit per componente:*\n\n- Design: $COMMIT_COUNT_DESIGN\n- Gameplay: $COMMIT_COUNT_GAMEPLAY\n- Narrativa: $COMMIT_COUNT_NARRATIVA\n- Performance: $COMMIT_COUNT_PERFORMANCE\n- Audio: $COMMIT_COUNT_AUDIO")
          BUTTON_URL="https://example.com" # Sostituisci con il link desiderato
          BUTTON_TEXT="Clicca qui per maggiori dettagli"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} -d text="$MESSAGE" -d parse_mode="Markdown" -d reply_markup="{\"inline_keyboard\":[[{\"text\":\"$BUTTON_TEXT\",\"url\":\"$BUTTON_URL\"}]]}"
